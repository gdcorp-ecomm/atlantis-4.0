//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.239.
// 
#pragma warning disable 1591

namespace Atlantis.Framework.AuthChangePassword.Impl.WSgdAuthentication
{


  /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="AuthenticationSoap", Namespace="http://tempuri.org/")]
    public partial class Authentication : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetHintOperationCompleted;
        
        private System.Threading.SendOrPostCallback VerifyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAuthTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResetPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback LookupNamespaceOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthorizeOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsStrongPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangePasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateDigestAuthOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthorizeAPIResellerOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidatePINOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrievePINOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendPasswordResetEmailOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendPasswordResetEmailIntlOperationCompleted;
        
        private System.Threading.SendOrPostCallback CaptchaRequiredOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnableTwoFactorOperationCompleted;
        
        private System.Threading.SendOrPostCallback DisableTwoFactorOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeletePendingTwoFactorOperationCompleted;
        
        private System.Threading.SendOrPostCallback StopPhoneOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeletePhoneOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddPhoneOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPhonesOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActivatePhoneOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidatePasswordOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Authentication() {
            this.Url = global::Atlantis.Framework.AuthChangePassword.Impl.Properties.Settings.Default.Atlantis_Framework_AuthChangePassword_Impl_WSgdAuthentication_Authentication;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetHintCompletedEventHandler GetHintCompleted;
        
        /// <remarks/>
        public event VerifyCompletedEventHandler VerifyCompleted;
        
        /// <remarks/>
        public event GetAuthTokenCompletedEventHandler GetAuthTokenCompleted;
        
        /// <remarks/>
        public event ResetPasswordCompletedEventHandler ResetPasswordCompleted;
        
        /// <remarks/>
        public event LookupNamespaceCompletedEventHandler LookupNamespaceCompleted;
        
        /// <remarks/>
        public event AuthorizeCompletedEventHandler AuthorizeCompleted;
        
        /// <remarks/>
        public event IsStrongPasswordCompletedEventHandler IsStrongPasswordCompleted;
        
        /// <remarks/>
        public event ChangePasswordCompletedEventHandler ChangePasswordCompleted;
        
        /// <remarks/>
        public event ValidateDigestAuthCompletedEventHandler ValidateDigestAuthCompleted;
        
        /// <remarks/>
        public event AuthorizeAPIResellerCompletedEventHandler AuthorizeAPIResellerCompleted;
        
        /// <remarks/>
        public event ValidatePINCompletedEventHandler ValidatePINCompleted;
        
        /// <remarks/>
        public event RetrievePINCompletedEventHandler RetrievePINCompleted;
        
        /// <remarks/>
        public event SendPasswordResetEmailCompletedEventHandler SendPasswordResetEmailCompleted;
        
        /// <remarks/>
        public event SendPasswordResetEmailIntlCompletedEventHandler SendPasswordResetEmailIntlCompleted;
        
        /// <remarks/>
        public event CaptchaRequiredCompletedEventHandler CaptchaRequiredCompleted;
        
        /// <remarks/>
        public event EnableTwoFactorCompletedEventHandler EnableTwoFactorCompleted;
        
        /// <remarks/>
        public event DisableTwoFactorCompletedEventHandler DisableTwoFactorCompleted;
        
        /// <remarks/>
        public event DeletePendingTwoFactorCompletedEventHandler DeletePendingTwoFactorCompleted;
        
        /// <remarks/>
        public event StopPhoneCompletedEventHandler StopPhoneCompleted;
        
        /// <remarks/>
        public event DeletePhoneCompletedEventHandler DeletePhoneCompleted;
        
        /// <remarks/>
        public event AddPhoneCompletedEventHandler AddPhoneCompleted;
        
        /// <remarks/>
        public event GetPhonesCompletedEventHandler GetPhonesCompleted;
        
        /// <remarks/>
        public event ValidateTokenCompletedEventHandler ValidateTokenCompleted;
        
        /// <remarks/>
        public event ActivatePhoneCompletedEventHandler ActivatePhoneCompleted;
        
        /// <remarks/>
        public event SendTokenCompletedEventHandler SendTokenCompleted;
        
        /// <remarks/>
        public event ValidatePasswordCompletedEventHandler ValidatePasswordCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetHint", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long GetHint(string sLoginName, int lPrivateLabelID, string sStreet, out string sPwdHint, out string sError) {
            object[] results = this.Invoke("GetHint", new object[] {
                        sLoginName,
                        lPrivateLabelID,
                        sStreet});
            sPwdHint = ((string)(results[1]));
            sError = ((string)(results[2]));
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void GetHintAsync(string sLoginName, int lPrivateLabelID, string sStreet) {
            this.GetHintAsync(sLoginName, lPrivateLabelID, sStreet, null);
        }
        
        /// <remarks/>
        public void GetHintAsync(string sLoginName, int lPrivateLabelID, string sStreet, object userState) {
            if ((this.GetHintOperationCompleted == null)) {
                this.GetHintOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHintOperationCompleted);
            }
            this.InvokeAsync("GetHint", new object[] {
                        sLoginName,
                        lPrivateLabelID,
                        sStreet}, this.GetHintOperationCompleted, userState);
        }
        
        private void OnGetHintOperationCompleted(object arg) {
            if ((this.GetHintCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHintCompleted(this, new GetHintCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Verify", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long Verify(string sLoginName, string sPassword, int lPrivateLabelID, string sIPAddress, out string sLoginKey, out string sValidationSource, out string sError) {
            object[] results = this.Invoke("Verify", new object[] {
                        sLoginName,
                        sPassword,
                        lPrivateLabelID,
                        sIPAddress});
            sLoginKey = ((string)(results[1]));
            sValidationSource = ((string)(results[2]));
            sError = ((string)(results[3]));
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void VerifyAsync(string sLoginName, string sPassword, int lPrivateLabelID, string sIPAddress) {
            this.VerifyAsync(sLoginName, sPassword, lPrivateLabelID, sIPAddress, null);
        }
        
        /// <remarks/>
        public void VerifyAsync(string sLoginName, string sPassword, int lPrivateLabelID, string sIPAddress, object userState) {
            if ((this.VerifyOperationCompleted == null)) {
                this.VerifyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerifyOperationCompleted);
            }
            this.InvokeAsync("Verify", new object[] {
                        sLoginName,
                        sPassword,
                        lPrivateLabelID,
                        sIPAddress}, this.VerifyOperationCompleted, userState);
        }
        
        private void OnVerifyOperationCompleted(object arg) {
            if ((this.VerifyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VerifyCompleted(this, new VerifyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAuthToken", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long GetAuthToken(string sLoginName, int lPrivateLabelID, out string sGUID, out string sError) {
            object[] results = this.Invoke("GetAuthToken", new object[] {
                        sLoginName,
                        lPrivateLabelID});
            sGUID = ((string)(results[1]));
            sError = ((string)(results[2]));
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void GetAuthTokenAsync(string sLoginName, int lPrivateLabelID) {
            this.GetAuthTokenAsync(sLoginName, lPrivateLabelID, null);
        }
        
        /// <remarks/>
        public void GetAuthTokenAsync(string sLoginName, int lPrivateLabelID, object userState) {
            if ((this.GetAuthTokenOperationCompleted == null)) {
                this.GetAuthTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAuthTokenOperationCompleted);
            }
            this.InvokeAsync("GetAuthToken", new object[] {
                        sLoginName,
                        lPrivateLabelID}, this.GetAuthTokenOperationCompleted, userState);
        }
        
        private void OnGetAuthTokenOperationCompleted(object arg) {
            if ((this.GetAuthTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAuthTokenCompleted(this, new GetAuthTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ResetPassword", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long ResetPassword(string sLoginName, int lPrivateLabelID, string sIPAddress, string sNewPassword, string sNewHint, string sGUID, out string sError) {
            object[] results = this.Invoke("ResetPassword", new object[] {
                        sLoginName,
                        lPrivateLabelID,
                        sIPAddress,
                        sNewPassword,
                        sNewHint,
                        sGUID});
            sError = ((string)(results[1]));
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void ResetPasswordAsync(string sLoginName, int lPrivateLabelID, string sIPAddress, string sNewPassword, string sNewHint, string sGUID) {
            this.ResetPasswordAsync(sLoginName, lPrivateLabelID, sIPAddress, sNewPassword, sNewHint, sGUID, null);
        }
        
        /// <remarks/>
        public void ResetPasswordAsync(string sLoginName, int lPrivateLabelID, string sIPAddress, string sNewPassword, string sNewHint, string sGUID, object userState) {
            if ((this.ResetPasswordOperationCompleted == null)) {
                this.ResetPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResetPasswordOperationCompleted);
            }
            this.InvokeAsync("ResetPassword", new object[] {
                        sLoginName,
                        lPrivateLabelID,
                        sIPAddress,
                        sNewPassword,
                        sNewHint,
                        sGUID}, this.ResetPasswordOperationCompleted, userState);
        }
        
        private void OnResetPasswordOperationCompleted(object arg) {
            if ((this.ResetPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResetPasswordCompleted(this, new ResetPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LookupNamespace", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("sShopperID")]
        public string LookupNamespace(string sNamespace, string sKey, int lPrivateLabelID, out string sEmail, out string sError) {
            object[] results = this.Invoke("LookupNamespace", new object[] {
                        sNamespace,
                        sKey,
                        lPrivateLabelID});
            sEmail = ((string)(results[1]));
            sError = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LookupNamespaceAsync(string sNamespace, string sKey, int lPrivateLabelID) {
            this.LookupNamespaceAsync(sNamespace, sKey, lPrivateLabelID, null);
        }
        
        /// <remarks/>
        public void LookupNamespaceAsync(string sNamespace, string sKey, int lPrivateLabelID, object userState) {
            if ((this.LookupNamespaceOperationCompleted == null)) {
                this.LookupNamespaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLookupNamespaceOperationCompleted);
            }
            this.InvokeAsync("LookupNamespace", new object[] {
                        sNamespace,
                        sKey,
                        lPrivateLabelID}, this.LookupNamespaceOperationCompleted, userState);
        }
        
        private void OnLookupNamespaceOperationCompleted(object arg) {
            if ((this.LookupNamespaceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LookupNamespaceCompleted(this, new LookupNamespaceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Authorize", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long Authorize(string sLoginName, string sPassword, int lPrivateLabelID, string sIPAddress, out string sXML, out string sError) {
            object[] results = this.Invoke("Authorize", new object[] {
                        sLoginName,
                        sPassword,
                        lPrivateLabelID,
                        sIPAddress});
            sXML = ((string)(results[1]));
            sError = ((string)(results[2]));
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void AuthorizeAsync(string sLoginName, string sPassword, int lPrivateLabelID, string sIPAddress) {
            this.AuthorizeAsync(sLoginName, sPassword, lPrivateLabelID, sIPAddress, null);
        }
        
        /// <remarks/>
        public void AuthorizeAsync(string sLoginName, string sPassword, int lPrivateLabelID, string sIPAddress, object userState) {
            if ((this.AuthorizeOperationCompleted == null)) {
                this.AuthorizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthorizeOperationCompleted);
            }
            this.InvokeAsync("Authorize", new object[] {
                        sLoginName,
                        sPassword,
                        lPrivateLabelID,
                        sIPAddress}, this.AuthorizeOperationCompleted, userState);
        }
        
        private void OnAuthorizeOperationCompleted(object arg) {
            if ((this.AuthorizeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthorizeCompleted(this, new AuthorizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IsStrongPassword", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long IsStrongPassword(string sLoginName, string sPassword) {
            object[] results = this.Invoke("IsStrongPassword", new object[] {
                        sLoginName,
                        sPassword});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void IsStrongPasswordAsync(string sLoginName, string sPassword) {
            this.IsStrongPasswordAsync(sLoginName, sPassword, null);
        }
        
        /// <remarks/>
        public void IsStrongPasswordAsync(string sLoginName, string sPassword, object userState) {
            if ((this.IsStrongPasswordOperationCompleted == null)) {
                this.IsStrongPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsStrongPasswordOperationCompleted);
            }
            this.InvokeAsync("IsStrongPassword", new object[] {
                        sLoginName,
                        sPassword}, this.IsStrongPasswordOperationCompleted, userState);
        }
        
        private void OnIsStrongPasswordOperationCompleted(object arg) {
            if ((this.IsStrongPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsStrongPasswordCompleted(this, new IsStrongPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChangePassword", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long ChangePassword(string sLoginName, int lPrivateLabelID, string sCurrentPassword, string sNewPassword, string sToken, string sPhoneNumber, string sHostname, string sIPAddress, string sNewHint, string sNewLogin, int lStrong, out string sError) {
            object[] results = this.Invoke("ChangePassword", new object[] {
                        sLoginName,
                        lPrivateLabelID,
                        sCurrentPassword,
                        sNewPassword,
                        sToken,
                        sPhoneNumber,
                        sHostname,
                        sIPAddress,
                        sNewHint,
                        sNewLogin,
                        lStrong});
            sError = ((string)(results[1]));
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void ChangePasswordAsync(string sLoginName, int lPrivateLabelID, string sCurrentPassword, string sNewPassword, string sToken, string sPhoneNumber, string sHostname, string sIPAddress, string sNewHint, string sNewLogin, int lStrong) {
            this.ChangePasswordAsync(sLoginName, lPrivateLabelID, sCurrentPassword, sNewPassword, sToken, sPhoneNumber, sHostname, sIPAddress, sNewHint, sNewLogin, lStrong, null);
        }
        
        /// <remarks/>
        public void ChangePasswordAsync(string sLoginName, int lPrivateLabelID, string sCurrentPassword, string sNewPassword, string sToken, string sPhoneNumber, string sHostname, string sIPAddress, string sNewHint, string sNewLogin, int lStrong, object userState) {
            if ((this.ChangePasswordOperationCompleted == null)) {
                this.ChangePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePasswordOperationCompleted);
            }
            this.InvokeAsync("ChangePassword", new object[] {
                        sLoginName,
                        lPrivateLabelID,
                        sCurrentPassword,
                        sNewPassword,
                        sToken,
                        sPhoneNumber,
                        sHostname,
                        sIPAddress,
                        sNewHint,
                        sNewLogin,
                        lStrong}, this.ChangePasswordOperationCompleted, userState);
        }
        
        private void OnChangePasswordOperationCompleted(object arg) {
            if ((this.ChangePasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangePasswordCompleted(this, new ChangePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidateDigestAuth", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ValidateDigestAuth(string sLoginName, string sRealm, string sMethod, string sURI, string sNonce, string sQOP, string sClientNonce, string sNonceCount, string sResponse, out string sError) {
            object[] results = this.Invoke("ValidateDigestAuth", new object[] {
                        sLoginName,
                        sRealm,
                        sMethod,
                        sURI,
                        sNonce,
                        sQOP,
                        sClientNonce,
                        sNonceCount,
                        sResponse});
            sError = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateDigestAuthAsync(string sLoginName, string sRealm, string sMethod, string sURI, string sNonce, string sQOP, string sClientNonce, string sNonceCount, string sResponse) {
            this.ValidateDigestAuthAsync(sLoginName, sRealm, sMethod, sURI, sNonce, sQOP, sClientNonce, sNonceCount, sResponse, null);
        }
        
        /// <remarks/>
        public void ValidateDigestAuthAsync(string sLoginName, string sRealm, string sMethod, string sURI, string sNonce, string sQOP, string sClientNonce, string sNonceCount, string sResponse, object userState) {
            if ((this.ValidateDigestAuthOperationCompleted == null)) {
                this.ValidateDigestAuthOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateDigestAuthOperationCompleted);
            }
            this.InvokeAsync("ValidateDigestAuth", new object[] {
                        sLoginName,
                        sRealm,
                        sMethod,
                        sURI,
                        sNonce,
                        sQOP,
                        sClientNonce,
                        sNonceCount,
                        sResponse}, this.ValidateDigestAuthOperationCompleted, userState);
        }
        
        private void OnValidateDigestAuthOperationCompleted(object arg) {
            if ((this.ValidateDigestAuthCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateDigestAuthCompleted(this, new ValidateDigestAuthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AuthorizeAPIReseller", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long AuthorizeAPIReseller(string sLoginName, string sPassword, string sIPAddress, out string sError) {
            object[] results = this.Invoke("AuthorizeAPIReseller", new object[] {
                        sLoginName,
                        sPassword,
                        sIPAddress});
            sError = ((string)(results[1]));
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void AuthorizeAPIResellerAsync(string sLoginName, string sPassword, string sIPAddress) {
            this.AuthorizeAPIResellerAsync(sLoginName, sPassword, sIPAddress, null);
        }
        
        /// <remarks/>
        public void AuthorizeAPIResellerAsync(string sLoginName, string sPassword, string sIPAddress, object userState) {
            if ((this.AuthorizeAPIResellerOperationCompleted == null)) {
                this.AuthorizeAPIResellerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthorizeAPIResellerOperationCompleted);
            }
            this.InvokeAsync("AuthorizeAPIReseller", new object[] {
                        sLoginName,
                        sPassword,
                        sIPAddress}, this.AuthorizeAPIResellerOperationCompleted, userState);
        }
        
        private void OnAuthorizeAPIResellerOperationCompleted(object arg) {
            if ((this.AuthorizeAPIResellerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthorizeAPIResellerCompleted(this, new AuthorizeAPIResellerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidatePIN", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long ValidatePIN(string sShopperID, int lPrivateLabelID, string sPIN, string sIPAddress, out string sError) {
            object[] results = this.Invoke("ValidatePIN", new object[] {
                        sShopperID,
                        lPrivateLabelID,
                        sPIN,
                        sIPAddress});
            sError = ((string)(results[1]));
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void ValidatePINAsync(string sShopperID, int lPrivateLabelID, string sPIN, string sIPAddress) {
            this.ValidatePINAsync(sShopperID, lPrivateLabelID, sPIN, sIPAddress, null);
        }
        
        /// <remarks/>
        public void ValidatePINAsync(string sShopperID, int lPrivateLabelID, string sPIN, string sIPAddress, object userState) {
            if ((this.ValidatePINOperationCompleted == null)) {
                this.ValidatePINOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidatePINOperationCompleted);
            }
            this.InvokeAsync("ValidatePIN", new object[] {
                        sShopperID,
                        lPrivateLabelID,
                        sPIN,
                        sIPAddress}, this.ValidatePINOperationCompleted, userState);
        }
        
        private void OnValidatePINOperationCompleted(object arg) {
            if ((this.ValidatePINCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidatePINCompleted(this, new ValidatePINCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RetrievePIN", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long RetrievePIN(string sShopperID, int lPrivateLabelID, string sPassword, string sIPAddress, out string sPIN, out string sError) {
            object[] results = this.Invoke("RetrievePIN", new object[] {
                        sShopperID,
                        lPrivateLabelID,
                        sPassword,
                        sIPAddress});
            sPIN = ((string)(results[1]));
            sError = ((string)(results[2]));
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void RetrievePINAsync(string sShopperID, int lPrivateLabelID, string sPassword, string sIPAddress) {
            this.RetrievePINAsync(sShopperID, lPrivateLabelID, sPassword, sIPAddress, null);
        }
        
        /// <remarks/>
        public void RetrievePINAsync(string sShopperID, int lPrivateLabelID, string sPassword, string sIPAddress, object userState) {
            if ((this.RetrievePINOperationCompleted == null)) {
                this.RetrievePINOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrievePINOperationCompleted);
            }
            this.InvokeAsync("RetrievePIN", new object[] {
                        sShopperID,
                        lPrivateLabelID,
                        sPassword,
                        sIPAddress}, this.RetrievePINOperationCompleted, userState);
        }
        
        private void OnRetrievePINOperationCompleted(object arg) {
            if ((this.RetrievePINCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrievePINCompleted(this, new RetrievePINCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendPasswordResetEmail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendPasswordResetEmail(string sShopperID, int lPrivateLabelID, out string sResultXML) {
            object[] results = this.Invoke("SendPasswordResetEmail", new object[] {
                        sShopperID,
                        lPrivateLabelID});
            sResultXML = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendPasswordResetEmailAsync(string sShopperID, int lPrivateLabelID) {
            this.SendPasswordResetEmailAsync(sShopperID, lPrivateLabelID, null);
        }
        
        /// <remarks/>
        public void SendPasswordResetEmailAsync(string sShopperID, int lPrivateLabelID, object userState) {
            if ((this.SendPasswordResetEmailOperationCompleted == null)) {
                this.SendPasswordResetEmailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendPasswordResetEmailOperationCompleted);
            }
            this.InvokeAsync("SendPasswordResetEmail", new object[] {
                        sShopperID,
                        lPrivateLabelID}, this.SendPasswordResetEmailOperationCompleted, userState);
        }
        
        private void OnSendPasswordResetEmailOperationCompleted(object arg) {
            if ((this.SendPasswordResetEmailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendPasswordResetEmailCompleted(this, new SendPasswordResetEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendPasswordResetEmailIntl", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendPasswordResetEmailIntl(string sShopperID, int lPrivateLabelID, string sLocalizationCode, out string sResultXML) {
            object[] results = this.Invoke("SendPasswordResetEmailIntl", new object[] {
                        sShopperID,
                        lPrivateLabelID,
                        sLocalizationCode});
            sResultXML = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendPasswordResetEmailIntlAsync(string sShopperID, int lPrivateLabelID, string sLocalizationCode) {
            this.SendPasswordResetEmailIntlAsync(sShopperID, lPrivateLabelID, sLocalizationCode, null);
        }
        
        /// <remarks/>
        public void SendPasswordResetEmailIntlAsync(string sShopperID, int lPrivateLabelID, string sLocalizationCode, object userState) {
            if ((this.SendPasswordResetEmailIntlOperationCompleted == null)) {
                this.SendPasswordResetEmailIntlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendPasswordResetEmailIntlOperationCompleted);
            }
            this.InvokeAsync("SendPasswordResetEmailIntl", new object[] {
                        sShopperID,
                        lPrivateLabelID,
                        sLocalizationCode}, this.SendPasswordResetEmailIntlOperationCompleted, userState);
        }
        
        private void OnSendPasswordResetEmailIntlOperationCompleted(object arg) {
            if ((this.SendPasswordResetEmailIntlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendPasswordResetEmailIntlCompleted(this, new SendPasswordResetEmailIntlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CaptchaRequired", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long CaptchaRequired(string sIPAddress) {
            object[] results = this.Invoke("CaptchaRequired", new object[] {
                        sIPAddress});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void CaptchaRequiredAsync(string sIPAddress) {
            this.CaptchaRequiredAsync(sIPAddress, null);
        }
        
        /// <remarks/>
        public void CaptchaRequiredAsync(string sIPAddress, object userState) {
            if ((this.CaptchaRequiredOperationCompleted == null)) {
                this.CaptchaRequiredOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCaptchaRequiredOperationCompleted);
            }
            this.InvokeAsync("CaptchaRequired", new object[] {
                        sIPAddress}, this.CaptchaRequiredOperationCompleted, userState);
        }
        
        private void OnCaptchaRequiredOperationCompleted(object arg) {
            if ((this.CaptchaRequiredCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CaptchaRequiredCompleted(this, new CaptchaRequiredCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EnableTwoFactor", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long EnableTwoFactor(string sShopperID, string sPassword, int lPrivateLabelID, string sPhoneXML, string sHostname, string sIPAddress, out string sError) {
            object[] results = this.Invoke("EnableTwoFactor", new object[] {
                        sShopperID,
                        sPassword,
                        lPrivateLabelID,
                        sPhoneXML,
                        sHostname,
                        sIPAddress});
            sError = ((string)(results[1]));
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void EnableTwoFactorAsync(string sShopperID, string sPassword, int lPrivateLabelID, string sPhoneXML, string sHostname, string sIPAddress) {
            this.EnableTwoFactorAsync(sShopperID, sPassword, lPrivateLabelID, sPhoneXML, sHostname, sIPAddress, null);
        }
        
        /// <remarks/>
        public void EnableTwoFactorAsync(string sShopperID, string sPassword, int lPrivateLabelID, string sPhoneXML, string sHostname, string sIPAddress, object userState) {
            if ((this.EnableTwoFactorOperationCompleted == null)) {
                this.EnableTwoFactorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnableTwoFactorOperationCompleted);
            }
            this.InvokeAsync("EnableTwoFactor", new object[] {
                        sShopperID,
                        sPassword,
                        lPrivateLabelID,
                        sPhoneXML,
                        sHostname,
                        sIPAddress}, this.EnableTwoFactorOperationCompleted, userState);
        }
        
        private void OnEnableTwoFactorOperationCompleted(object arg) {
            if ((this.EnableTwoFactorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnableTwoFactorCompleted(this, new EnableTwoFactorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DisableTwoFactor", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long DisableTwoFactor(string sShopperID, string sPassword, int lPrivateLabelID, string sToken, string sPhoneNumber, string sHostname, string sIPAddress, out string sError) {
            object[] results = this.Invoke("DisableTwoFactor", new object[] {
                        sShopperID,
                        sPassword,
                        lPrivateLabelID,
                        sToken,
                        sPhoneNumber,
                        sHostname,
                        sIPAddress});
            sError = ((string)(results[1]));
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void DisableTwoFactorAsync(string sShopperID, string sPassword, int lPrivateLabelID, string sToken, string sPhoneNumber, string sHostname, string sIPAddress) {
            this.DisableTwoFactorAsync(sShopperID, sPassword, lPrivateLabelID, sToken, sPhoneNumber, sHostname, sIPAddress, null);
        }
        
        /// <remarks/>
        public void DisableTwoFactorAsync(string sShopperID, string sPassword, int lPrivateLabelID, string sToken, string sPhoneNumber, string sHostname, string sIPAddress, object userState) {
            if ((this.DisableTwoFactorOperationCompleted == null)) {
                this.DisableTwoFactorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDisableTwoFactorOperationCompleted);
            }
            this.InvokeAsync("DisableTwoFactor", new object[] {
                        sShopperID,
                        sPassword,
                        lPrivateLabelID,
                        sToken,
                        sPhoneNumber,
                        sHostname,
                        sIPAddress}, this.DisableTwoFactorOperationCompleted, userState);
        }
        
        private void OnDisableTwoFactorOperationCompleted(object arg) {
            if ((this.DisableTwoFactorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DisableTwoFactorCompleted(this, new DisableTwoFactorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeletePendingTwoFactor", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long DeletePendingTwoFactor(string sShopperID, int lPrivateLabelID, string sHostname, string sIPAddress, out string sError) {
            object[] results = this.Invoke("DeletePendingTwoFactor", new object[] {
                        sShopperID,
                        lPrivateLabelID,
                        sHostname,
                        sIPAddress});
            sError = ((string)(results[1]));
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void DeletePendingTwoFactorAsync(string sShopperID, int lPrivateLabelID, string sHostname, string sIPAddress) {
            this.DeletePendingTwoFactorAsync(sShopperID, lPrivateLabelID, sHostname, sIPAddress, null);
        }
        
        /// <remarks/>
        public void DeletePendingTwoFactorAsync(string sShopperID, int lPrivateLabelID, string sHostname, string sIPAddress, object userState) {
            if ((this.DeletePendingTwoFactorOperationCompleted == null)) {
                this.DeletePendingTwoFactorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePendingTwoFactorOperationCompleted);
            }
            this.InvokeAsync("DeletePendingTwoFactor", new object[] {
                        sShopperID,
                        lPrivateLabelID,
                        sHostname,
                        sIPAddress}, this.DeletePendingTwoFactorOperationCompleted, userState);
        }
        
        private void OnDeletePendingTwoFactorOperationCompleted(object arg) {
            if ((this.DeletePendingTwoFactorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeletePendingTwoFactorCompleted(this, new DeletePendingTwoFactorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/StopPhone", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void StopPhone(string sPhoneNumber) {
            this.Invoke("StopPhone", new object[] {
                        sPhoneNumber});
        }
        
        /// <remarks/>
        public void StopPhoneAsync(string sPhoneNumber) {
            this.StopPhoneAsync(sPhoneNumber, null);
        }
        
        /// <remarks/>
        public void StopPhoneAsync(string sPhoneNumber, object userState) {
            if ((this.StopPhoneOperationCompleted == null)) {
                this.StopPhoneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStopPhoneOperationCompleted);
            }
            this.InvokeAsync("StopPhone", new object[] {
                        sPhoneNumber}, this.StopPhoneOperationCompleted, userState);
        }
        
        private void OnStopPhoneOperationCompleted(object arg) {
            if ((this.StopPhoneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StopPhoneCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeletePhone", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long DeletePhone(string sShopperID, string sPhoneNumber, string sHostname, string sIPAddress, out string sError) {
            object[] results = this.Invoke("DeletePhone", new object[] {
                        sShopperID,
                        sPhoneNumber,
                        sHostname,
                        sIPAddress});
            sError = ((string)(results[1]));
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void DeletePhoneAsync(string sShopperID, string sPhoneNumber, string sHostname, string sIPAddress) {
            this.DeletePhoneAsync(sShopperID, sPhoneNumber, sHostname, sIPAddress, null);
        }
        
        /// <remarks/>
        public void DeletePhoneAsync(string sShopperID, string sPhoneNumber, string sHostname, string sIPAddress, object userState) {
            if ((this.DeletePhoneOperationCompleted == null)) {
                this.DeletePhoneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePhoneOperationCompleted);
            }
            this.InvokeAsync("DeletePhone", new object[] {
                        sShopperID,
                        sPhoneNumber,
                        sHostname,
                        sIPAddress}, this.DeletePhoneOperationCompleted, userState);
        }
        
        private void OnDeletePhoneOperationCompleted(object arg) {
            if ((this.DeletePhoneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeletePhoneCompleted(this, new DeletePhoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddPhone", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long AddPhone(string sShopperID, string sPhoneXML, string sHostname, string sIPAddress, out string sError) {
            object[] results = this.Invoke("AddPhone", new object[] {
                        sShopperID,
                        sPhoneXML,
                        sHostname,
                        sIPAddress});
            sError = ((string)(results[1]));
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void AddPhoneAsync(string sShopperID, string sPhoneXML, string sHostname, string sIPAddress) {
            this.AddPhoneAsync(sShopperID, sPhoneXML, sHostname, sIPAddress, null);
        }
        
        /// <remarks/>
        public void AddPhoneAsync(string sShopperID, string sPhoneXML, string sHostname, string sIPAddress, object userState) {
            if ((this.AddPhoneOperationCompleted == null)) {
                this.AddPhoneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddPhoneOperationCompleted);
            }
            this.InvokeAsync("AddPhone", new object[] {
                        sShopperID,
                        sPhoneXML,
                        sHostname,
                        sIPAddress}, this.AddPhoneOperationCompleted, userState);
        }
        
        private void OnAddPhoneOperationCompleted(object arg) {
            if ((this.AddPhoneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddPhoneCompleted(this, new AddPhoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPhones", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long GetPhones(string sShopperID, out string sPhonesXML, out string sError) {
            object[] results = this.Invoke("GetPhones", new object[] {
                        sShopperID});
            sPhonesXML = ((string)(results[1]));
            sError = ((string)(results[2]));
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void GetPhonesAsync(string sShopperID) {
            this.GetPhonesAsync(sShopperID, null);
        }
        
        /// <remarks/>
        public void GetPhonesAsync(string sShopperID, object userState) {
            if ((this.GetPhonesOperationCompleted == null)) {
                this.GetPhonesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPhonesOperationCompleted);
            }
            this.InvokeAsync("GetPhones", new object[] {
                        sShopperID}, this.GetPhonesOperationCompleted, userState);
        }
        
        private void OnGetPhonesOperationCompleted(object arg) {
            if ((this.GetPhonesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPhonesCompleted(this, new GetPhonesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidateToken", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long ValidateToken(string sShopperID, string sToken, string sPhoneNumber, string sHostname, string sIPAddress, out string sError) {
            object[] results = this.Invoke("ValidateToken", new object[] {
                        sShopperID,
                        sToken,
                        sPhoneNumber,
                        sHostname,
                        sIPAddress});
            sError = ((string)(results[1]));
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateTokenAsync(string sShopperID, string sToken, string sPhoneNumber, string sHostname, string sIPAddress) {
            this.ValidateTokenAsync(sShopperID, sToken, sPhoneNumber, sHostname, sIPAddress, null);
        }
        
        /// <remarks/>
        public void ValidateTokenAsync(string sShopperID, string sToken, string sPhoneNumber, string sHostname, string sIPAddress, object userState) {
            if ((this.ValidateTokenOperationCompleted == null)) {
                this.ValidateTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateTokenOperationCompleted);
            }
            this.InvokeAsync("ValidateToken", new object[] {
                        sShopperID,
                        sToken,
                        sPhoneNumber,
                        sHostname,
                        sIPAddress}, this.ValidateTokenOperationCompleted, userState);
        }
        
        private void OnValidateTokenOperationCompleted(object arg) {
            if ((this.ValidateTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateTokenCompleted(this, new ValidateTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ActivatePhone", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long ActivatePhone(string sShopperID, string sToken, string sPhoneNumber, string sHostname, string sIPAddress, out string sError) {
            object[] results = this.Invoke("ActivatePhone", new object[] {
                        sShopperID,
                        sToken,
                        sPhoneNumber,
                        sHostname,
                        sIPAddress});
            sError = ((string)(results[1]));
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void ActivatePhoneAsync(string sShopperID, string sToken, string sPhoneNumber, string sHostname, string sIPAddress) {
            this.ActivatePhoneAsync(sShopperID, sToken, sPhoneNumber, sHostname, sIPAddress, null);
        }
        
        /// <remarks/>
        public void ActivatePhoneAsync(string sShopperID, string sToken, string sPhoneNumber, string sHostname, string sIPAddress, object userState) {
            if ((this.ActivatePhoneOperationCompleted == null)) {
                this.ActivatePhoneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivatePhoneOperationCompleted);
            }
            this.InvokeAsync("ActivatePhone", new object[] {
                        sShopperID,
                        sToken,
                        sPhoneNumber,
                        sHostname,
                        sIPAddress}, this.ActivatePhoneOperationCompleted, userState);
        }
        
        private void OnActivatePhoneOperationCompleted(object arg) {
            if ((this.ActivatePhoneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivatePhoneCompleted(this, new ActivatePhoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendToken", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long SendToken(string sShopperID, string sPhoneNumber, string sHostname, string sIPAddress, out string sError) {
            object[] results = this.Invoke("SendToken", new object[] {
                        sShopperID,
                        sPhoneNumber,
                        sHostname,
                        sIPAddress});
            sError = ((string)(results[1]));
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void SendTokenAsync(string sShopperID, string sPhoneNumber, string sHostname, string sIPAddress) {
            this.SendTokenAsync(sShopperID, sPhoneNumber, sHostname, sIPAddress, null);
        }
        
        /// <remarks/>
        public void SendTokenAsync(string sShopperID, string sPhoneNumber, string sHostname, string sIPAddress, object userState) {
            if ((this.SendTokenOperationCompleted == null)) {
                this.SendTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendTokenOperationCompleted);
            }
            this.InvokeAsync("SendToken", new object[] {
                        sShopperID,
                        sPhoneNumber,
                        sHostname,
                        sIPAddress}, this.SendTokenOperationCompleted, userState);
        }
        
        private void OnSendTokenOperationCompleted(object arg) {
            if ((this.SendTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendTokenCompleted(this, new SendTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidatePassword", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long ValidatePassword(string sShopperID, string sPassword, out string sError) {
            object[] results = this.Invoke("ValidatePassword", new object[] {
                        sShopperID,
                        sPassword});
            sError = ((string)(results[1]));
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void ValidatePasswordAsync(string sShopperID, string sPassword) {
            this.ValidatePasswordAsync(sShopperID, sPassword, null);
        }
        
        /// <remarks/>
        public void ValidatePasswordAsync(string sShopperID, string sPassword, object userState) {
            if ((this.ValidatePasswordOperationCompleted == null)) {
                this.ValidatePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidatePasswordOperationCompleted);
            }
            this.InvokeAsync("ValidatePassword", new object[] {
                        sShopperID,
                        sPassword}, this.ValidatePasswordOperationCompleted, userState);
        }
        
        private void OnValidatePasswordOperationCompleted(object arg) {
            if ((this.ValidatePasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidatePasswordCompleted(this, new ValidatePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetHintCompletedEventHandler(object sender, GetHintCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHintCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHintCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sPwdHint {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void VerifyCompletedEventHandler(object sender, VerifyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VerifyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VerifyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sLoginKey {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sValidationSource {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string sError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAuthTokenCompletedEventHandler(object sender, GetAuthTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAuthTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAuthTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sGUID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ResetPasswordCompletedEventHandler(object sender, ResetPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ResetPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ResetPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void LookupNamespaceCompletedEventHandler(object sender, LookupNamespaceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LookupNamespaceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LookupNamespaceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sEmail {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AuthorizeCompletedEventHandler(object sender, AuthorizeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthorizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthorizeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void IsStrongPasswordCompletedEventHandler(object sender, IsStrongPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsStrongPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsStrongPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ChangePasswordCompletedEventHandler(object sender, ChangePasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangePasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangePasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ValidateDigestAuthCompletedEventHandler(object sender, ValidateDigestAuthCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateDigestAuthCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateDigestAuthCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AuthorizeAPIResellerCompletedEventHandler(object sender, AuthorizeAPIResellerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthorizeAPIResellerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthorizeAPIResellerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ValidatePINCompletedEventHandler(object sender, ValidatePINCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidatePINCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidatePINCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RetrievePINCompletedEventHandler(object sender, RetrievePINCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrievePINCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrievePINCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sPIN {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SendPasswordResetEmailCompletedEventHandler(object sender, SendPasswordResetEmailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendPasswordResetEmailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendPasswordResetEmailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sResultXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SendPasswordResetEmailIntlCompletedEventHandler(object sender, SendPasswordResetEmailIntlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendPasswordResetEmailIntlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendPasswordResetEmailIntlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sResultXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CaptchaRequiredCompletedEventHandler(object sender, CaptchaRequiredCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CaptchaRequiredCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CaptchaRequiredCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void EnableTwoFactorCompletedEventHandler(object sender, EnableTwoFactorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EnableTwoFactorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EnableTwoFactorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DisableTwoFactorCompletedEventHandler(object sender, DisableTwoFactorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DisableTwoFactorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DisableTwoFactorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeletePendingTwoFactorCompletedEventHandler(object sender, DeletePendingTwoFactorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeletePendingTwoFactorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeletePendingTwoFactorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void StopPhoneCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeletePhoneCompletedEventHandler(object sender, DeletePhoneCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeletePhoneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeletePhoneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddPhoneCompletedEventHandler(object sender, AddPhoneCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddPhoneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddPhoneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPhonesCompletedEventHandler(object sender, GetPhonesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPhonesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPhonesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sPhonesXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ValidateTokenCompletedEventHandler(object sender, ValidateTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ActivatePhoneCompletedEventHandler(object sender, ActivatePhoneCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActivatePhoneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActivatePhoneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SendTokenCompletedEventHandler(object sender, SendTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ValidatePasswordCompletedEventHandler(object sender, ValidatePasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidatePasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidatePasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591