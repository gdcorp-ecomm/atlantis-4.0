<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="maxLengthError" xml:space="preserve">
    <value>{0}debe tener menos de {1} caracteres.</value>
  </data>
  <data name="minLengthError" xml:space="preserve">
    <value>{0}debe tener más de {1} caracteres.</value>
  </data>
  <data name="invalidData" xml:space="preserve">
    <value>Datos no válidos</value>
  </data>
  <data name="equalLengthAlpha" xml:space="preserve">
    <value>{0}debe tener {1} caracteres.</value>
  </data>
  <data name="equalLengthNumeric" xml:space="preserve">
    <value>{0}debe tener {1} digitos.</value>
  </data>
  <data name="invalidCharacters" xml:space="preserve">
    <value>{0}contiene caracteres no válidos</value>
  </data>
  <data name="match" xml:space="preserve">
    <value>{0}debe ser igual a {1}</value>
  </data>
  <data name="notMatch" xml:space="preserve">
    <value>{0}no puede ser igual a {1}</value>
  </data>
  <data name="numericRule" xml:space="preserve">
    <value>{0}debe contener únicamente números.</value>
  </data>
  <data name="isInvalid" xml:space="preserve">
    <value>{0}no es válido;</value>
  </data>
  <data name="phoneMustStartAndContain" xml:space="preserve">
    <value>{0}no debe iniciar con un 0 o un 1.  Debe contener {1} caracteres </value>
  </data>
  <data name="phoneMustContainCharacters" xml:space="preserve">
    <value>{0}debe contener {1} caracteres</value>
  </data>
  <data name="mustBeNumeric" xml:space="preserve">
    <value>{0}debe ser numérico</value>
  </data>
  <data name="invalidFormat" xml:space="preserve">
    <value>{0}está en un formato no válido.</value>
  </data>
  <data name="required" xml:space="preserve">
    <value>{0}es obligatorio</value>
  </data>
  <data name="birthdayValid" xml:space="preserve">
    <value>Si se proporciona un cumpleaños, debe proporcionar valores válidos</value>
  </data>
  <data name="straightNumerical" xml:space="preserve">
    <value>{0}no puede ser una secuencia numérica sucesiva de dígitos.</value>
  </data>
  <data name="commonPhrase" xml:space="preserve">
    <value>{0}no puede incluir una palabra o frase común.</value>
  </data>
  <data name="lastFive" xml:space="preserve">
    <value>No se pueden volver a usar las últimas 5 contraseñas.</value>
  </data>
  <data name="matchesHint" xml:space="preserve">
    <value>{0}no puede ser igual a la Sugerencia de contraseña.</value>
  </data>
  <data name="samePassword" xml:space="preserve">
    <value>No puede usar la misma contraseña en un período de 30 días.</value>
  </data>
  <data name="isInvalidStatusCode" xml:space="preserve">
    <value>{0}no es válido. Código de estado: {1}</value>
  </data>
  <data name="passwordConfirm" xml:space="preserve">
    <value>{0}no puede tener más de {1} caracteres.  Recorte {0} antes de proporcionarlo al validador.</value>
  </data>
  <data name="usernameExists" xml:space="preserve">
    <value>El nombre de usuario ya existe</value>
  </data>
  <data name="username" xml:space="preserve">
    <value>Nombre de usuario</value>
  </data>
  <data name="birthday" xml:space="preserve">
    <value>Cumpleaños</value>
  </data>
  <data name="address1" xml:space="preserve">
    <value>Dirección 1</value>
  </data>
  <data name="address2" xml:space="preserve">
    <value>Dirección 2</value>
  </data>
  <data name="phone" xml:space="preserve">
    <value>Teléfono</value>
  </data>
  <data name="callInPin" xml:space="preserve">
    <value>PIN de llamada</value>
  </data>
  <data name="city" xml:space="preserve">
    <value>Ciudad</value>
  </data>
  <data name="country" xml:space="preserve">
    <value>País</value>
  </data>
  <data name="email" xml:space="preserve">
    <value>Correo electrónico</value>
  </data>
  <data name="firstName" xml:space="preserve">
    <value>Nombre</value>
  </data>
  <data name="lastName" xml:space="preserve">
    <value>Apellido</value>
  </data>
  <data name="password" xml:space="preserve">
    <value>Contraseña</value>
  </data>
  <data name="confirmPassword" xml:space="preserve">
    <value>Confirmar contraseña</value>
  </data>
  <data name="passwordHint" xml:space="preserve">
    <value>Sugerencia de contraseña</value>
  </data>
  <data name="ext" xml:space="preserve">
    <value>Extensión</value>
  </data>
  <data name="state" xml:space="preserve">
    <value>Estado/provincia</value>
  </data>
  <data name="zip" xml:space="preserve">
    <value>Código postal</value>
  </data>
  <data name="alreadyExists" xml:space="preserve">
    <value>{0}ya existe</value>
  </data>
  <data name="cannotBeNumeric" xml:space="preserve">
    <value>{0}no pueden ser solo números</value>
  </data>
  <data name="pinOneDigit" xml:space="preserve">
    <value>El PIN debe contener más de un dígito</value>
  </data>
</root>