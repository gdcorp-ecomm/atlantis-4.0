<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="maxLengthError" xml:space="preserve">
    <value>{0} must be less than {1} characters.</value>
  </data>
  <data name="minLengthError" xml:space="preserve">
    <value>{0} must be greater than {1} characters.</value>
  </data>
  <data name="invalidData" xml:space="preserve">
    <value>Invalid Data</value>
  </data>
  <data name="equalLengthAlpha" xml:space="preserve">
    <value>{0} must be {1} characters.</value>
  </data>
  <data name="equalLengthNumeric" xml:space="preserve">
    <value>{0} must be {1} digits.</value>
  </data>
  <data name="invalidCharacters" xml:space="preserve">
    <value>{0} contains invalid characters</value>
  </data>
  <data name="match" xml:space="preserve">
    <value>{0} must be equal to {1}</value>
  </data>
  <data name="notMatch" xml:space="preserve">
    <value>{0} cannot be equal to {1}</value>
  </data>
  <data name="numericRule" xml:space="preserve">
    <value>{0} must contain only numbers.</value>
  </data>
  <data name="isInvalid" xml:space="preserve">
    <value>{0} is invalid;</value>
  </data>
  <data name="phoneMustStartAndContain" xml:space="preserve">
    <value>{0} must not start with a 0 or 1.  Must contain {1} characters </value>
  </data>
  <data name="phoneMustContainCharacters" xml:space="preserve">
    <value>{0} must contain {1} characters</value>
  </data>
  <data name="mustBeNumeric" xml:space="preserve">
    <value>{0} must be numeric</value>
  </data>
  <data name="invalidFormat" xml:space="preserve">
    <value>{0} is an invalid format.</value>
  </data>
  <data name="required" xml:space="preserve">
    <value>{0} is required</value>
  </data>
  <data name="birthdayValid" xml:space="preserve">
    <value>If providing a birthday you must provide valid values</value>
  </data>
  <data name="straightNumerical" xml:space="preserve">
    <value>{0} cannot be any straight numerical sequence of digits.</value>
  </data>
  <data name="commonPhrase" xml:space="preserve">
    <value>{0} cannot include a common word or phrase.</value>
  </data>
  <data name="lastFive" xml:space="preserve">
    <value>不能重新使用最近用过的 5 个密码。</value>
  </data>
  <data name="matchesHint" xml:space="preserve">
    <value>{0} cannot be equal to Password Hint.</value>
  </data>
  <data name="samePassword" xml:space="preserve">
    <value>在 30 天之内不能重复使用同一个密码。</value>
  </data>
  <data name="isInvalidStatusCode" xml:space="preserve">
    <value>{0} is invalid. Status Code: {1}</value>
  </data>
  <data name="passwordConfirm" xml:space="preserve">
    <value>{0} cannot be greater than {1} characters.  Trim {0} before supplying it to the validator.</value>
  </data>
  <data name="usernameExists" xml:space="preserve">
    <value>Username already exists</value>
  </data>
  <data name="username" xml:space="preserve">
    <value>用户名</value>
  </data>
  <data name="birthday" xml:space="preserve">
    <value>生日</value>
  </data>
  <data name="address1" xml:space="preserve">
    <value>地址 1</value>
  </data>
  <data name="address2" xml:space="preserve">
    <value>地址 2</value>
  </data>
  <data name="phone" xml:space="preserve">
    <value>电话</value>
  </data>
  <data name="callInPin" xml:space="preserve">
    <value>Call-in PIN</value>
  </data>
  <data name="city" xml:space="preserve">
    <value>城市</value>
  </data>
  <data name="country" xml:space="preserve">
    <value>国家/地区</value>
  </data>
  <data name="email" xml:space="preserve">
    <value>电子邮件</value>
  </data>
  <data name="firstName" xml:space="preserve">
    <value>名字</value>
  </data>
  <data name="lastName" xml:space="preserve">
    <value>姓氏</value>
  </data>
  <data name="password" xml:space="preserve">
    <value>密码</value>
  </data>
  <data name="confirmPassword" xml:space="preserve">
    <value>确认密码</value>
  </data>
  <data name="passwordHint" xml:space="preserve">
    <value>Password hint</value>
  </data>
  <data name="ext" xml:space="preserve">
    <value>Ext</value>
  </data>
  <data name="state" xml:space="preserve">
    <value>State / Province</value>
  </data>
  <data name="zip" xml:space="preserve">
    <value>Zip / Postal code</value>
  </data>
  <data name="alreadyExists" xml:space="preserve">
    <value>{0} already exists</value>
  </data>
  <data name="cannotBeNumeric" xml:space="preserve">
    <value>{0} cannot be only numbers</value>
  </data>
  <data name="pinOneDigit" xml:space="preserve">
    <value>PIN must contain more than one digit</value>
  </data>
  <data name="errorEmailInvalidFormat" xml:space="preserve">
    <value>Email is an invalid format.</value>
  </data>
  <data name="errorEmailMaxLength" xml:space="preserve">
    <value>Email cannot be longer than {0} characters long.</value>
    <comment>{0} replaced with the max email length</comment>
  </data>
  <data name="errorEmailRequired" xml:space="preserve">
    <value>Email is required.</value>
  </data>
  <data name="errorPassword2Required" xml:space="preserve">
    <value>Confirm Password is required.</value>
  </data>
  <data name="errorPasswordInvalidFormat" xml:space="preserve">
    <value>Password must contain at least 1 uppercase letter, 1 number, and cannot begin or end with a space.</value>
  </data>
  <data name="errorPasswordMaxLength" xml:space="preserve">
    <value>Password cannot be longer than {0} characters long.</value>
    <comment>{0} replaced with the max password length</comment>
  </data>
  <data name="errorPasswordMinLength" xml:space="preserve">
    <value>Password must be at least {0} characters long.</value>
    <comment>{0} replaced with the min password length</comment>
  </data>
  <data name="errorPasswordMismatch" xml:space="preserve">
    <value>Passwords must match.</value>
  </data>
  <data name="errorPasswordRequired" xml:space="preserve">
    <value>Password is required.</value>
  </data>
  <data name="errorPinMaxLength" xml:space="preserve">
    <value>PIN cannot be longer than {0} characters long.</value>
    <comment>{0} replaced with the max PIN length</comment>
  </data>
  <data name="errorPinMinLength" xml:space="preserve">
    <value>PIN must be at least {0} characters long.</value>
    <comment>{0} replaced with the min PIN length</comment>
  </data>
  <data name="errorPinNumeric" xml:space="preserve">
    <value>PIN must contain only numbers.</value>
  </data>
  <data name="errorPinRequired" xml:space="preserve">
    <value>PIN is required.</value>
  </data>
  <data name="errorPinSequential" xml:space="preserve">
    <value>PIN cannot be any straight numerical sequence of digits.</value>
  </data>
  <data name="errorUsernameInvalidCharacters" xml:space="preserve">
    <value>Username contains invalid characters.</value>
  </data>
  <data name="errorUsernameMaxLength" xml:space="preserve">
    <value>Username cannot be longer than {0} characters long.</value>
    <comment>{0} replaced with the max username length</comment>
  </data>
  <data name="errorUsernameNumericOnly" xml:space="preserve">
    <value>Username cannot be only numbers.</value>
  </data>
  <data name="errorUsernameRequired" xml:space="preserve">
    <value>Username is required.</value>
  </data>
</root>