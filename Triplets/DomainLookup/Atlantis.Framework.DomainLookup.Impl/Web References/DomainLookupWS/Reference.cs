//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18052.
// 
#pragma warning disable 1591

namespace Atlantis.Framework.DomainLookup.Impl.DomainLookupWS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ParkWebSoap", Namespace="http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx")]
    public partial class ParkWeb : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetParkedTemplateRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateTemplateByReccuringIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDomainExpirationDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsSmartDomainOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDomainInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsMobilizedDomainOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDomainTemplateRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetParkPageInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSubCategoryThemeDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback getThemeConfigDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCashParkingDomainInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback getLegacyThemeCPDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCategoryKeywordsOperationCompleted;
        
        private System.Threading.SendOrPostCallback performAvailCheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetResellerDRIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDomainInfoWithPdDomainOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ParkWeb() {
            this.Url = global::Atlantis.Framework.DomainLookup.Impl.Properties.Settings.Default.Atlantis_Framework_DomainLookup_Impl_DomainLookupWS_ParkWeb;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetParkedTemplateRecordCompletedEventHandler GetParkedTemplateRecordCompleted;
        
        /// <remarks/>
        public event UpdateTemplateByReccuringIDCompletedEventHandler UpdateTemplateByReccuringIDCompleted;
        
        /// <remarks/>
        public event GetDomainExpirationDateCompletedEventHandler GetDomainExpirationDateCompleted;
        
        /// <remarks/>
        public event IsSmartDomainCompletedEventHandler IsSmartDomainCompleted;
        
        /// <remarks/>
        public event GetDomainInfoCompletedEventHandler GetDomainInfoCompleted;
        
        /// <remarks/>
        public event IsMobilizedDomainCompletedEventHandler IsMobilizedDomainCompleted;
        
        /// <remarks/>
        public event GetDomainTemplateRecordCompletedEventHandler GetDomainTemplateRecordCompleted;
        
        /// <remarks/>
        public event GetParkPageInfoCompletedEventHandler GetParkPageInfoCompleted;
        
        /// <remarks/>
        public event getSubCategoryThemeDataCompletedEventHandler getSubCategoryThemeDataCompleted;
        
        /// <remarks/>
        public event getThemeConfigDataCompletedEventHandler getThemeConfigDataCompleted;
        
        /// <remarks/>
        public event GetCashParkingDomainInfoCompletedEventHandler GetCashParkingDomainInfoCompleted;
        
        /// <remarks/>
        public event getLegacyThemeCPDataCompletedEventHandler getLegacyThemeCPDataCompleted;
        
        /// <remarks/>
        public event GetCategoryKeywordsCompletedEventHandler GetCategoryKeywordsCompleted;
        
        /// <remarks/>
        public event performAvailCheckCompletedEventHandler performAvailCheckCompleted;
        
        /// <remarks/>
        public event GetResellerDRIDCompletedEventHandler GetResellerDRIDCompleted;
        
        /// <remarks/>
        public event GetDomainInfoWithPdDomainCompletedEventHandler GetDomainInfoWithPdDomainCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx/GetParkedTemplate" +
            "Record", RequestNamespace="http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx", ResponseNamespace="http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetParkedTemplateRecord(int iRecurringID) {
            object[] results = this.Invoke("GetParkedTemplateRecord", new object[] {
                        iRecurringID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetParkedTemplateRecord(int iRecurringID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetParkedTemplateRecord", new object[] {
                        iRecurringID}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetParkedTemplateRecord(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetParkedTemplateRecordAsync(int iRecurringID) {
            this.GetParkedTemplateRecordAsync(iRecurringID, null);
        }
        
        /// <remarks/>
        public void GetParkedTemplateRecordAsync(int iRecurringID, object userState) {
            if ((this.GetParkedTemplateRecordOperationCompleted == null)) {
                this.GetParkedTemplateRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetParkedTemplateRecordOperationCompleted);
            }
            this.InvokeAsync("GetParkedTemplateRecord", new object[] {
                        iRecurringID}, this.GetParkedTemplateRecordOperationCompleted, userState);
        }
        
        private void OnGetParkedTemplateRecordOperationCompleted(object arg) {
            if ((this.GetParkedTemplateRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetParkedTemplateRecordCompleted(this, new GetParkedTemplateRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx/UpdateTemplateByR" +
            "eccuringID", RequestNamespace="http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx", ResponseNamespace="http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateTemplateByReccuringID(int piRecurringID, string wsLocation, string[] psNameValuePairs) {
            this.Invoke("UpdateTemplateByReccuringID", new object[] {
                        piRecurringID,
                        wsLocation,
                        psNameValuePairs});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateTemplateByReccuringID(int piRecurringID, string wsLocation, string[] psNameValuePairs, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateTemplateByReccuringID", new object[] {
                        piRecurringID,
                        wsLocation,
                        psNameValuePairs}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdateTemplateByReccuringID(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdateTemplateByReccuringIDAsync(int piRecurringID, string wsLocation, string[] psNameValuePairs) {
            this.UpdateTemplateByReccuringIDAsync(piRecurringID, wsLocation, psNameValuePairs, null);
        }
        
        /// <remarks/>
        public void UpdateTemplateByReccuringIDAsync(int piRecurringID, string wsLocation, string[] psNameValuePairs, object userState) {
            if ((this.UpdateTemplateByReccuringIDOperationCompleted == null)) {
                this.UpdateTemplateByReccuringIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateTemplateByReccuringIDOperationCompleted);
            }
            this.InvokeAsync("UpdateTemplateByReccuringID", new object[] {
                        piRecurringID,
                        wsLocation,
                        psNameValuePairs}, this.UpdateTemplateByReccuringIDOperationCompleted, userState);
        }
        
        private void OnUpdateTemplateByReccuringIDOperationCompleted(object arg) {
            if ((this.UpdateTemplateByReccuringIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateTemplateByReccuringIDCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx/GetDomainExpirati" +
            "onDate", RequestNamespace="http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx", ResponseNamespace="http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.DateTime GetDomainExpirationDate(string domainname) {
            object[] results = this.Invoke("GetDomainExpirationDate", new object[] {
                        domainname});
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDomainExpirationDate(string domainname, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDomainExpirationDate", new object[] {
                        domainname}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.DateTime EndGetDomainExpirationDate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        public void GetDomainExpirationDateAsync(string domainname) {
            this.GetDomainExpirationDateAsync(domainname, null);
        }
        
        /// <remarks/>
        public void GetDomainExpirationDateAsync(string domainname, object userState) {
            if ((this.GetDomainExpirationDateOperationCompleted == null)) {
                this.GetDomainExpirationDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDomainExpirationDateOperationCompleted);
            }
            this.InvokeAsync("GetDomainExpirationDate", new object[] {
                        domainname}, this.GetDomainExpirationDateOperationCompleted, userState);
        }
        
        private void OnGetDomainExpirationDateOperationCompleted(object arg) {
            if ((this.GetDomainExpirationDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDomainExpirationDateCompleted(this, new GetDomainExpirationDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx/IsSmartDomain", RequestNamespace="http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx", ResponseNamespace="http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsSmartDomain(string sDomainName) {
            object[] results = this.Invoke("IsSmartDomain", new object[] {
                        sDomainName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginIsSmartDomain(string sDomainName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("IsSmartDomain", new object[] {
                        sDomainName}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndIsSmartDomain(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsSmartDomainAsync(string sDomainName) {
            this.IsSmartDomainAsync(sDomainName, null);
        }
        
        /// <remarks/>
        public void IsSmartDomainAsync(string sDomainName, object userState) {
            if ((this.IsSmartDomainOperationCompleted == null)) {
                this.IsSmartDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsSmartDomainOperationCompleted);
            }
            this.InvokeAsync("IsSmartDomain", new object[] {
                        sDomainName}, this.IsSmartDomainOperationCompleted, userState);
        }
        
        private void OnIsSmartDomainOperationCompleted(object arg) {
            if ((this.IsSmartDomainCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsSmartDomainCompleted(this, new IsSmartDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx/GetDomainInfo", RequestNamespace="http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx", ResponseNamespace="http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetDomainInfo(string sDomainName) {
            object[] results = this.Invoke("GetDomainInfo", new object[] {
                        sDomainName});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDomainInfo(string sDomainName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDomainInfo", new object[] {
                        sDomainName}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetDomainInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetDomainInfoAsync(string sDomainName) {
            this.GetDomainInfoAsync(sDomainName, null);
        }
        
        /// <remarks/>
        public void GetDomainInfoAsync(string sDomainName, object userState) {
            if ((this.GetDomainInfoOperationCompleted == null)) {
                this.GetDomainInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDomainInfoOperationCompleted);
            }
            this.InvokeAsync("GetDomainInfo", new object[] {
                        sDomainName}, this.GetDomainInfoOperationCompleted, userState);
        }
        
        private void OnGetDomainInfoOperationCompleted(object arg) {
            if ((this.GetDomainInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDomainInfoCompleted(this, new GetDomainInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx/IsMobilizedDomain" +
            "", RequestNamespace="http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx", ResponseNamespace="http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsMobilizedDomain(string sDomainName) {
            object[] results = this.Invoke("IsMobilizedDomain", new object[] {
                        sDomainName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginIsMobilizedDomain(string sDomainName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("IsMobilizedDomain", new object[] {
                        sDomainName}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndIsMobilizedDomain(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsMobilizedDomainAsync(string sDomainName) {
            this.IsMobilizedDomainAsync(sDomainName, null);
        }
        
        /// <remarks/>
        public void IsMobilizedDomainAsync(string sDomainName, object userState) {
            if ((this.IsMobilizedDomainOperationCompleted == null)) {
                this.IsMobilizedDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsMobilizedDomainOperationCompleted);
            }
            this.InvokeAsync("IsMobilizedDomain", new object[] {
                        sDomainName}, this.IsMobilizedDomainOperationCompleted, userState);
        }
        
        private void OnIsMobilizedDomainOperationCompleted(object arg) {
            if ((this.IsMobilizedDomainCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsMobilizedDomainCompleted(this, new IsMobilizedDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx/GetDomainTemplate" +
            "Record", RequestNamespace="http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx", ResponseNamespace="http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetDomainTemplateRecord(string sDomainName) {
            object[] results = this.Invoke("GetDomainTemplateRecord", new object[] {
                        sDomainName});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDomainTemplateRecord(string sDomainName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDomainTemplateRecord", new object[] {
                        sDomainName}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetDomainTemplateRecord(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetDomainTemplateRecordAsync(string sDomainName) {
            this.GetDomainTemplateRecordAsync(sDomainName, null);
        }
        
        /// <remarks/>
        public void GetDomainTemplateRecordAsync(string sDomainName, object userState) {
            if ((this.GetDomainTemplateRecordOperationCompleted == null)) {
                this.GetDomainTemplateRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDomainTemplateRecordOperationCompleted);
            }
            this.InvokeAsync("GetDomainTemplateRecord", new object[] {
                        sDomainName}, this.GetDomainTemplateRecordOperationCompleted, userState);
        }
        
        private void OnGetDomainTemplateRecordOperationCompleted(object arg) {
            if ((this.GetDomainTemplateRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDomainTemplateRecordCompleted(this, new GetDomainTemplateRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx/GetParkPageInfo", RequestNamespace="http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx", ResponseNamespace="http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetParkPageInfo(string domainname) {
            object[] results = this.Invoke("GetParkPageInfo", new object[] {
                        domainname});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetParkPageInfo(string domainname, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetParkPageInfo", new object[] {
                        domainname}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetParkPageInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetParkPageInfoAsync(string domainname) {
            this.GetParkPageInfoAsync(domainname, null);
        }
        
        /// <remarks/>
        public void GetParkPageInfoAsync(string domainname, object userState) {
            if ((this.GetParkPageInfoOperationCompleted == null)) {
                this.GetParkPageInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetParkPageInfoOperationCompleted);
            }
            this.InvokeAsync("GetParkPageInfo", new object[] {
                        domainname}, this.GetParkPageInfoOperationCompleted, userState);
        }
        
        private void OnGetParkPageInfoOperationCompleted(object arg) {
            if ((this.GetParkPageInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetParkPageInfoCompleted(this, new GetParkPageInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx/getSubCategoryThe" +
            "meData", RequestNamespace="http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx", ResponseNamespace="http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getSubCategoryThemeData() {
            object[] results = this.Invoke("getSubCategoryThemeData", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetSubCategoryThemeData(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getSubCategoryThemeData", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndgetSubCategoryThemeData(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getSubCategoryThemeDataAsync() {
            this.getSubCategoryThemeDataAsync(null);
        }
        
        /// <remarks/>
        public void getSubCategoryThemeDataAsync(object userState) {
            if ((this.getSubCategoryThemeDataOperationCompleted == null)) {
                this.getSubCategoryThemeDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSubCategoryThemeDataOperationCompleted);
            }
            this.InvokeAsync("getSubCategoryThemeData", new object[0], this.getSubCategoryThemeDataOperationCompleted, userState);
        }
        
        private void OngetSubCategoryThemeDataOperationCompleted(object arg) {
            if ((this.getSubCategoryThemeDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSubCategoryThemeDataCompleted(this, new getSubCategoryThemeDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx/getThemeConfigDat" +
            "a", RequestNamespace="http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx", ResponseNamespace="http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getThemeConfigData() {
            object[] results = this.Invoke("getThemeConfigData", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetThemeConfigData(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getThemeConfigData", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndgetThemeConfigData(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getThemeConfigDataAsync() {
            this.getThemeConfigDataAsync(null);
        }
        
        /// <remarks/>
        public void getThemeConfigDataAsync(object userState) {
            if ((this.getThemeConfigDataOperationCompleted == null)) {
                this.getThemeConfigDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetThemeConfigDataOperationCompleted);
            }
            this.InvokeAsync("getThemeConfigData", new object[0], this.getThemeConfigDataOperationCompleted, userState);
        }
        
        private void OngetThemeConfigDataOperationCompleted(object arg) {
            if ((this.getThemeConfigDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getThemeConfigDataCompleted(this, new getThemeConfigDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx/GetCashParkingDom" +
            "ainInfo", RequestNamespace="http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx", ResponseNamespace="http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetCashParkingDomainInfo(string domainname) {
            object[] results = this.Invoke("GetCashParkingDomainInfo", new object[] {
                        domainname});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCashParkingDomainInfo(string domainname, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCashParkingDomainInfo", new object[] {
                        domainname}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetCashParkingDomainInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetCashParkingDomainInfoAsync(string domainname) {
            this.GetCashParkingDomainInfoAsync(domainname, null);
        }
        
        /// <remarks/>
        public void GetCashParkingDomainInfoAsync(string domainname, object userState) {
            if ((this.GetCashParkingDomainInfoOperationCompleted == null)) {
                this.GetCashParkingDomainInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCashParkingDomainInfoOperationCompleted);
            }
            this.InvokeAsync("GetCashParkingDomainInfo", new object[] {
                        domainname}, this.GetCashParkingDomainInfoOperationCompleted, userState);
        }
        
        private void OnGetCashParkingDomainInfoOperationCompleted(object arg) {
            if ((this.GetCashParkingDomainInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCashParkingDomainInfoCompleted(this, new GetCashParkingDomainInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx/getLegacyThemeCPD" +
            "ata", RequestNamespace="http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx", ResponseNamespace="http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getLegacyThemeCPData() {
            object[] results = this.Invoke("getLegacyThemeCPData", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetLegacyThemeCPData(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getLegacyThemeCPData", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndgetLegacyThemeCPData(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getLegacyThemeCPDataAsync() {
            this.getLegacyThemeCPDataAsync(null);
        }
        
        /// <remarks/>
        public void getLegacyThemeCPDataAsync(object userState) {
            if ((this.getLegacyThemeCPDataOperationCompleted == null)) {
                this.getLegacyThemeCPDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLegacyThemeCPDataOperationCompleted);
            }
            this.InvokeAsync("getLegacyThemeCPData", new object[0], this.getLegacyThemeCPDataOperationCompleted, userState);
        }
        
        private void OngetLegacyThemeCPDataOperationCompleted(object arg) {
            if ((this.getLegacyThemeCPDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLegacyThemeCPDataCompleted(this, new getLegacyThemeCPDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx/GetCategoryKeywor" +
            "ds", RequestNamespace="http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx", ResponseNamespace="http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetCategoryKeywords() {
            object[] results = this.Invoke("GetCategoryKeywords", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCategoryKeywords(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCategoryKeywords", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetCategoryKeywords(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetCategoryKeywordsAsync() {
            this.GetCategoryKeywordsAsync(null);
        }
        
        /// <remarks/>
        public void GetCategoryKeywordsAsync(object userState) {
            if ((this.GetCategoryKeywordsOperationCompleted == null)) {
                this.GetCategoryKeywordsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCategoryKeywordsOperationCompleted);
            }
            this.InvokeAsync("GetCategoryKeywords", new object[0], this.GetCategoryKeywordsOperationCompleted, userState);
        }
        
        private void OnGetCategoryKeywordsOperationCompleted(object arg) {
            if ((this.GetCategoryKeywordsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCategoryKeywordsCompleted(this, new GetCategoryKeywordsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx/performAvailCheck" +
            "", RequestNamespace="http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx", ResponseNamespace="http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string performAvailCheck(string domain, string[] tlds) {
            object[] results = this.Invoke("performAvailCheck", new object[] {
                        domain,
                        tlds});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginperformAvailCheck(string domain, string[] tlds, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("performAvailCheck", new object[] {
                        domain,
                        tlds}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndperformAvailCheck(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void performAvailCheckAsync(string domain, string[] tlds) {
            this.performAvailCheckAsync(domain, tlds, null);
        }
        
        /// <remarks/>
        public void performAvailCheckAsync(string domain, string[] tlds, object userState) {
            if ((this.performAvailCheckOperationCompleted == null)) {
                this.performAvailCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnperformAvailCheckOperationCompleted);
            }
            this.InvokeAsync("performAvailCheck", new object[] {
                        domain,
                        tlds}, this.performAvailCheckOperationCompleted, userState);
        }
        
        private void OnperformAvailCheckOperationCompleted(object arg) {
            if ((this.performAvailCheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.performAvailCheckCompleted(this, new performAvailCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx/GetResellerDRID", RequestNamespace="http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx", ResponseNamespace="http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetResellerDRID(int privatelabelid) {
            object[] results = this.Invoke("GetResellerDRID", new object[] {
                        privatelabelid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetResellerDRID(int privatelabelid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetResellerDRID", new object[] {
                        privatelabelid}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetResellerDRID(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetResellerDRIDAsync(int privatelabelid) {
            this.GetResellerDRIDAsync(privatelabelid, null);
        }
        
        /// <remarks/>
        public void GetResellerDRIDAsync(int privatelabelid, object userState) {
            if ((this.GetResellerDRIDOperationCompleted == null)) {
                this.GetResellerDRIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResellerDRIDOperationCompleted);
            }
            this.InvokeAsync("GetResellerDRID", new object[] {
                        privatelabelid}, this.GetResellerDRIDOperationCompleted, userState);
        }
        
        private void OnGetResellerDRIDOperationCompleted(object arg) {
            if ((this.GetResellerDRIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetResellerDRIDCompleted(this, new GetResellerDRIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx/GetDomainInfoWith" +
            "PdDomain", RequestNamespace="http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx", ResponseNamespace="http://cmpapp-v01.prod.mesa1.gdg:80/CMPWebServices/ParkWeb.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetDomainInfoWithPdDomain(string domainName) {
            object[] results = this.Invoke("GetDomainInfoWithPdDomain", new object[] {
                        domainName});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDomainInfoWithPdDomain(string domainName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDomainInfoWithPdDomain", new object[] {
                        domainName}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetDomainInfoWithPdDomain(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetDomainInfoWithPdDomainAsync(string domainName) {
            this.GetDomainInfoWithPdDomainAsync(domainName, null);
        }
        
        /// <remarks/>
        public void GetDomainInfoWithPdDomainAsync(string domainName, object userState) {
            if ((this.GetDomainInfoWithPdDomainOperationCompleted == null)) {
                this.GetDomainInfoWithPdDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDomainInfoWithPdDomainOperationCompleted);
            }
            this.InvokeAsync("GetDomainInfoWithPdDomain", new object[] {
                        domainName}, this.GetDomainInfoWithPdDomainOperationCompleted, userState);
        }
        
        private void OnGetDomainInfoWithPdDomainOperationCompleted(object arg) {
            if ((this.GetDomainInfoWithPdDomainCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDomainInfoWithPdDomainCompleted(this, new GetDomainInfoWithPdDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetParkedTemplateRecordCompletedEventHandler(object sender, GetParkedTemplateRecordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetParkedTemplateRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetParkedTemplateRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateTemplateByReccuringIDCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetDomainExpirationDateCompletedEventHandler(object sender, GetDomainExpirationDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDomainExpirationDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDomainExpirationDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.DateTime Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void IsSmartDomainCompletedEventHandler(object sender, IsSmartDomainCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsSmartDomainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsSmartDomainCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetDomainInfoCompletedEventHandler(object sender, GetDomainInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDomainInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDomainInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void IsMobilizedDomainCompletedEventHandler(object sender, IsMobilizedDomainCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsMobilizedDomainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsMobilizedDomainCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetDomainTemplateRecordCompletedEventHandler(object sender, GetDomainTemplateRecordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDomainTemplateRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDomainTemplateRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetParkPageInfoCompletedEventHandler(object sender, GetParkPageInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetParkPageInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetParkPageInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getSubCategoryThemeDataCompletedEventHandler(object sender, getSubCategoryThemeDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSubCategoryThemeDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSubCategoryThemeDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getThemeConfigDataCompletedEventHandler(object sender, getThemeConfigDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getThemeConfigDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getThemeConfigDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetCashParkingDomainInfoCompletedEventHandler(object sender, GetCashParkingDomainInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCashParkingDomainInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCashParkingDomainInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getLegacyThemeCPDataCompletedEventHandler(object sender, getLegacyThemeCPDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLegacyThemeCPDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getLegacyThemeCPDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetCategoryKeywordsCompletedEventHandler(object sender, GetCategoryKeywordsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCategoryKeywordsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCategoryKeywordsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void performAvailCheckCompletedEventHandler(object sender, performAvailCheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class performAvailCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal performAvailCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetResellerDRIDCompletedEventHandler(object sender, GetResellerDRIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetResellerDRIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetResellerDRIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetDomainInfoWithPdDomainCompletedEventHandler(object sender, GetDomainInfoWithPdDomainCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDomainInfoWithPdDomainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDomainInfoWithPdDomainCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591